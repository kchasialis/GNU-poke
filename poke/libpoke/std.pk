/* std.pk - Standard definitions for poke.  */

/* Copyright (C) 2019, 2020 Jose E. Marchesi.  */

/* This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*** Standard units.  */

defunit b = 1;
defunit N = 4;
defunit B = 8;

defunit Kb = 10 ** 3;
defunit KB = 10 ** 3 * 8;
defunit Mb = 10 ** 6;
defunit MB = 10 ** 6 * 8;
defunit Gb = 10 ** 9;
defunit GB = 10 ** 9 * 8;

defunit Kib = 2 ** 10;
defunit KiB = 2 ** 10 * 8;
defunit Mib = 2 ** 20;
defunit MiB = 2 ** 20 * 8;
defunit Gib = 2 ** 30;
defunit GiB = 2 ** 30 * 8;

/*** Standard Integral Types.  */

deftype bit = uint<1>;
deftype nibble = uint<4>;

deftype uint8 = uint<8>;
deftype uint16 = uint<16>;
deftype uint32 = uint<32>;
deftype uint64 = uint<64>;

deftype int8 = int<8>;
deftype int16 = int<16>;
deftype int32 = int<32>;
deftype int64 = int<64>;

deftype uint = uint32;
deftype int = int32;
deftype char = uint8;
deftype byte = uint8;
deftype ushort = uint16;
deftype short = int16;
deftype ulong = uint64;
deftype long = int64;

/*** Standard Offset Types.  */

deftype off64 = offset<int64,b>;
deftype uoff64 = offset<uint64,b>;

/*** Conversion Functions.  */

defun catos = (char[] chars) string:
  {
   defvar s = "";

   for (c in chars)
     {
       if (c == '\0')
         return s;
       s = s + c as string;
     }
   return s;
  }

defun stoca = (string s, char[] ca, char fill = 0) void:
  {
    if (s'length > ca'length)
      raise E_out_of_bounds;

    defvar i = 0;
    while (i < ca'length)
      {
        ca[i] = i < s'length ? s[i] : fill;
        i = i + 1;
      }
  }

defun atoi = (string s, int b = 10) long:
  {
    defvar result = 0;

    defun htoi = (char c) int:
      {
        if (c >= '0' && c <= '9') return c - '0';
        if (c >= 'a' && c <= 'f') return c - 'a' + 10;
        if (c >= 'A' && c <= 'F') return c - 'A' + 10;
      }

    defun valid = (char c, int b) int:
      {
        if (b <= 10) return (c >= '0') && (c <= '0' + b - 1);
        if (b == 16) return ((c >= '0') && (c <= '9')) ||
         ((c >= 'a') && (c <= 'f')) || ((c >= 'A') && (c <= 'F'));
      }

    if (!(b in [2, 8, 10, 16]))
      raise E_inval;

    for (c in s)
    {
      if (!valid(c, b))
        return result;

      result = result * b + htoi(c);
    }

    return result;
  }

/*** String functions.  */

/* Return the index in the string S of the first occurence of the
   character C.  If C is not in S then return the size of S.  */

defun strchr = (string s, uint<8> c) int<32>:
  {
    defvar i = 0;
    for (t in s)
      {
        if (s[i] == c)
          break;
        i = i + 1;
      }

    return i;
  }

/* Return S with leading characters belonging to the given set
   omitted.  By default the omitted characters are whitespaces.  */
defun ltrim = (string s, string cs = " \t") string:
  {
    defvar cs_length = cs'length;
    defvar result = "";
    for (c in s)
      {
	if (strchr (cs, c) == cs_length || result != "")
	  result = result + c as string;
      }
    return result;
  }

/* Return S with trailing character belonging tot he given set
   omitted.  By default the omitted characters are whitespaces.  */
defun rtrim = (string s, string cs = " \t") string:
  {
    defvar cs_length = cs'length;
    defvar result = "";
    defvar i = s'length;
    while (i > 0)
    {
      defvar c = s[i - 1];
      if (strchr (cs, c) == cs_length || result != "")
        result = c as string + result;
      i = i - 1;
    }
    return result;
  }

/*** Sorting Functions.  */

deftype Comparator = (any,any)int;

defun qsort = (any[] array, Comparator cmp_f,
               long left = 0, long right = array'length - 1) void:
{
   defun partition = int:
   {
     defun swap = (long i1, long i2) void:
     {
       defvar t = array[i1];
       array[i1] = array[i2];
       array[i2] = t;
     }

     defvar pivot = array[right];
     defvar i = left - 1;

     defvar j = left;
     while (j <= right - 1)
     {
       if (cmp_f (array[j], pivot) <= 0)
       {
         i = i + 1;
         swap (i, j);
       }

       j = j + 1;
     }

     swap (i + 1, right);
     return i + 1;
   }

   if (left < right)
   {
     defvar pi = partition;

     qsort (array, cmp_f, left, pi - 1);
     qsort (array, cmp_f, pi + 1, right);
   }
}

/*** CRC functions.  */

/*
   See ISO 3309 [ISO-3309] or ITU-T V.42 [ITU-V42] for a formal specification.
*/

defun crc32 = (byte[] buf) uint<32>:
  {
   defun update = (uint<32> crc, byte[] buf) uint<32>:
   {
    defvar table =
    [
     0x00000000U, 0x77073096U, 0xee0e612cU, 0x990951baU, 0x076dc419U, 0x706af48fU, 0xe963a535U, 0x9e6495a3U,
     0x0edb8832U, 0x79dcb8a4U, 0xe0d5e91eU, 0x97d2d988U, 0x09b64c2bU, 0x7eb17cbdU, 0xe7b82d07U, 0x90bf1d91U,
     0x1db71064U, 0x6ab020f2U, 0xf3b97148U, 0x84be41deU, 0x1adad47dU, 0x6ddde4ebU, 0xf4d4b551U, 0x83d385c7U,
     0x136c9856U, 0x646ba8c0U, 0xfd62f97aU, 0x8a65c9ecU, 0x14015c4fU, 0x63066cd9U, 0xfa0f3d63U, 0x8d080df5U,
     0x3b6e20c8U, 0x4c69105eU, 0xd56041e4U, 0xa2677172U, 0x3c03e4d1U, 0x4b04d447U, 0xd20d85fdU, 0xa50ab56bU,
     0x35b5a8faU, 0x42b2986cU, 0xdbbbc9d6U, 0xacbcf940U, 0x32d86ce3U, 0x45df5c75U, 0xdcd60dcfU, 0xabd13d59U,
     0x26d930acU, 0x51de003aU, 0xc8d75180U, 0xbfd06116U, 0x21b4f4b5U, 0x56b3c423U, 0xcfba9599U, 0xb8bda50fU,
     0x2802b89eU, 0x5f058808U, 0xc60cd9b2U, 0xb10be924U, 0x2f6f7c87U, 0x58684c11U, 0xc1611dabU, 0xb6662d3dU,
     0x76dc4190U, 0x01db7106U, 0x98d220bcU, 0xefd5102aU, 0x71b18589U, 0x06b6b51fU, 0x9fbfe4a5U, 0xe8b8d433U,
     0x7807c9a2U, 0x0f00f934U, 0x9609a88eU, 0xe10e9818U, 0x7f6a0dbbU, 0x086d3d2dU, 0x91646c97U, 0xe6635c01U,
     0x6b6b51f4U, 0x1c6c6162U, 0x856530d8U, 0xf262004eU, 0x6c0695edU, 0x1b01a57bU, 0x8208f4c1U, 0xf50fc457U,
     0x65b0d9c6U, 0x12b7e950U, 0x8bbeb8eaU, 0xfcb9887cU, 0x62dd1ddfU, 0x15da2d49U, 0x8cd37cf3U, 0xfbd44c65U,
     0x4db26158U, 0x3ab551ceU, 0xa3bc0074U, 0xd4bb30e2U, 0x4adfa541U, 0x3dd895d7U, 0xa4d1c46dU, 0xd3d6f4fbU,
     0x4369e96aU, 0x346ed9fcU, 0xad678846U, 0xda60b8d0U, 0x44042d73U, 0x33031de5U, 0xaa0a4c5fU, 0xdd0d7cc9U,
     0x5005713cU, 0x270241aaU, 0xbe0b1010U, 0xc90c2086U, 0x5768b525U, 0x206f85b3U, 0xb966d409U, 0xce61e49fU,
     0x5edef90eU, 0x29d9c998U, 0xb0d09822U, 0xc7d7a8b4U, 0x59b33d17U, 0x2eb40d81U, 0xb7bd5c3bU, 0xc0ba6cadU,
     0xedb88320U, 0x9abfb3b6U, 0x03b6e20cU, 0x74b1d29aU, 0xead54739U, 0x9dd277afU, 0x04db2615U, 0x73dc1683U,
     0xe3630b12U, 0x94643b84U, 0x0d6d6a3eU, 0x7a6a5aa8U, 0xe40ecf0bU, 0x9309ff9dU, 0x0a00ae27U, 0x7d079eb1U,
     0xf00f9344U, 0x8708a3d2U, 0x1e01f268U, 0x6906c2feU, 0xf762575dU, 0x806567cbU, 0x196c3671U, 0x6e6b06e7U,
     0xfed41b76U, 0x89d32be0U, 0x10da7a5aU, 0x67dd4accU, 0xf9b9df6fU, 0x8ebeeff9U, 0x17b7be43U, 0x60b08ed5U,
     0xd6d6a3e8U, 0xa1d1937eU, 0x38d8c2c4U, 0x4fdff252U, 0xd1bb67f1U, 0xa6bc5767U, 0x3fb506ddU, 0x48b2364bU,
     0xd80d2bdaU, 0xaf0a1b4cU, 0x36034af6U, 0x41047a60U, 0xdf60efc3U, 0xa867df55U, 0x316e8eefU, 0x4669be79U,
     0xcb61b38cU, 0xbc66831aU, 0x256fd2a0U, 0x5268e236U, 0xcc0c7795U, 0xbb0b4703U, 0x220216b9U, 0x5505262fU,
     0xc5ba3bbeU, 0xb2bd0b28U, 0x2bb45a92U, 0x5cb36a04U, 0xc2d7ffa7U, 0xb5d0cf31U, 0x2cd99e8bU, 0x5bdeae1dU,
     0x9b64c2b0U, 0xec63f226U, 0x756aa39cU, 0x026d930aU, 0x9c0906a9U, 0xeb0e363fU, 0x72076785U, 0x05005713U,
     0x95bf4a82U, 0xe2b87a14U, 0x7bb12baeU, 0x0cb61b38U, 0x92d28e9bU, 0xe5d5be0dU, 0x7cdcefb7U, 0x0bdbdf21U,
     0x86d3d2d4U, 0xf1d4e242U, 0x68ddb3f8U, 0x1fda836eU, 0x81be16cdU, 0xf6b9265bU, 0x6fb077e1U, 0x18b74777U,
     0x88085ae6U, 0xff0f6a70U, 0x66063bcaU, 0x11010b5cU, 0x8f659effU, 0xf862ae69U, 0x616bffd3U, 0x166ccf45U,
     0xa00ae278U, 0xd70dd2eeU, 0x4e048354U, 0x3903b3c2U, 0xa7672661U, 0xd06016f7U, 0x4969474dU, 0x3e6e77dbU,
     0xaed16a4aU, 0xd9d65adcU, 0x40df0b66U, 0x37d83bf0U, 0xa9bcae53U, 0xdebb9ec5U, 0x47b2cf7fU, 0x30b5ffe9U,
     0xbdbdf21cU, 0xcabac28aU, 0x53b39330U, 0x24b4a3a6U, 0xbad03605U, 0xcdd70693U, 0x54de5729U, 0x23d967bfU,
     0xb3667a2eU, 0xc4614ab8U, 0x5d681b02U, 0x2a6f2b94U, 0xb40bbe37U, 0xc30c8ea1U, 0x5a05df1bU, 0x2d02ef8dU
     ];

    defvar c = crc as uint<32>;
    for (x in buf)
      {
	c = table[(c ^ x) & 0xff] ^ (c .>> 8);
      }
    return c;
   }

   return update (0xffffffffU, buf) ^ 0xffffffffU;
  }

/*** Date and Time functions.  */

defun ptime = (uint<64> seconds) void:
{
    defun days_in_year = (int year) int:
    {
      if (year % 400 == 0) return 366;
      if (year % 100 == 0) return 365;
      if (year % 4 == 0) return 366;
      return 365;
    }

    defun days_in_month = (int year, int month) int:
    {
      if (month < 0)
	raise E_out_of_bounds;
      if (month > 11)
	raise E_out_of_bounds;

      /* Deal with February.  */
      if (month == 1)
	{
	  if (days_in_year (year) == 366)
	    return 29;
	  else
	    return 28;
	}

      /* 30 days hath Sept, Apr, June & Nov ...  */
      if (month in [8, 3, 5, 10])
        return 30;

      return 31;
    }

    defvar month_names = ["Jan", "Feb", "Mar", "Apr", "May", "Jun",
			  "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

    defvar year = 1970;
    defvar month = 0;
    defvar day = 0;
    defvar hour = 0;
    defvar minute = 0;
    while (seconds >= 0)
      {
	if (seconds < 24 * 60 * 60)
	  {
	    hour = seconds / 3600;
	    seconds = seconds % 3600;
	    minute = seconds / 60;
	    seconds = seconds % 60;
	    break;
	  }
	else if (seconds < days_in_month (year, month) * 24 * 60 * 60)
	  {
	    seconds = seconds - 24 * 60 * 60;
	    day = day + 1;
	  }
	else if (seconds < days_in_year (year) * 24 * 60 * 60)
	  {
	    seconds = seconds - days_in_month (year, month) * 24 * 60 * 60;
	    month = month + 1;
	  }
	else
	  {
	    seconds = seconds - days_in_year (year) * 24 * 60 * 60;
	    year = year + 1;
	  }
      }

    printf ("%<date-time:%i32d-%s-%i32d %i32d:%i32d:%i32d%>",
	    year, month_names[month], day + 1,
	    hour, minute, seconds);
}

deftype POSIX_Time32 = struct
{
  uint<32>  seconds;

  method _print = void:
  {
    print "#<";
    ptime (seconds);
    print ">";
  }
};

deftype POSIX_Time64 = struct
{
  uint<64>  seconds;

  method _print = void:
  {
    print "#<";
    ptime (seconds);
    print ">";
  }
};



/*** Miscellanea.  */

defvar NULL = 0#B;
