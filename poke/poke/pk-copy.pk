/* pk-copy.pk - `copy' command.  */

/* Copyright (C) 2020 Jose E. Marchesi */

/* This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

pk_help_str = pk_help_str
  + "\ncopy\t\tCopy a range of memory.";


defun copy = (int from_ios = get_ios,
              int to_ios = get_ios,
              off64 from = 0#B,
              off64 to = from,
              off64 size = 0#B) void:
{
 if (size == 0#B
     || (to == from && to_ios == from_ios))
   return;

 /* Determine the best step size to operate with.  */
 defvar step = 1#B;

 if (size % 8#B == 0#B)
   step = 8#B;
 else if (size % 4#B == 0#B)
   step = 4#B;
 else if (size % 2#B == 0#B)
   step = 2#B;

 /* Change the endianness to big endian, so we get the right ordering
    of the bytes when operating on steps > 1#B.  */
 defvar endian = get_endian;
 set_endian (ENDIAN_BIG);

 /* Copy the stuff.  */
 defvar end = from + size;
 while (from < end)
   {
     if (step == 8#B)
       uint<64> @ to_ios : to = uint<64> @ from_ios : from;
     else if (step == 4#B)
       uint<32> @ to_ios : to = uint<32> @ from_ios : from;
     else if (step == 2#B)
       uint<16> @ to_ios : to = uint<16> @ from_ios : from;
     else
       byte @ to_ios : to = byte @ from_ios : from;

     from = from + step;
     to = to + step;
   }

 /* Cleanup.  */
 set_endian (endian);
}
